from dotenv import load_dotenv
import os
import logging
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING, CHATTING = range(2)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_pairs = {}
# –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
waiting_users = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."""
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç! üëã\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/search - –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/stop - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n"
        "/help - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /search."
    )
    return ConversationHandler.END

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–∞—Ç–µ
    if user_id in user_pairs:
        await update.message.reply_text("–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ! –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop.")
        return CHATTING
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    if user_id in waiting_users:
        await update.message.reply_text("–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return WAITING
    
    await update.message.reply_text("–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞—á–∞—Ç... ‚è≥")
    waiting_users.append(user_id)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –¥–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏, —Å–æ–µ–¥–∏–Ω—è–µ–º –∏—Ö
    if len(waiting_users) >= 2:
        user1 = waiting_users.pop(0)
        user2 = waiting_users.pop(0)
        
        user_pairs[user1] = user2
        user_pairs[user2] = user1
        
        await context.bot.send_message(user1, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ. üéâ")
        await context.bot.send_message(user2, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ. üéâ")
        return CHATTING
    
    return WAITING

async def stop_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    if user_id in user_pairs:
        partner_id = user_pairs[user_id]
        
        # –£–¥–∞–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–∞—Ä
        del user_pairs[user_id]
        if partner_id in user_pairs:
            del user_pairs[partner_id]
        
        await update.message.reply_text("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /search.")
        await context.bot.send_message(partner_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç. –î–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /search.")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    if user_id in waiting_users:
        waiting_users.remove(user_id)
        await update.message.reply_text("–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return ConversationHandler.END
    
    await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ. –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /search.")
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    if user_id in user_pairs:
        partner_id = user_pairs[user_id]
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
        await context.bot.send_message(partner_id, f"{update.message.text}")
        return CHATTING
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    if user_id in waiting_users:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞.")
        return WAITING
    
    await update.message.reply_text("–î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /search.")
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é."""
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/search - –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/stop - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n"
        "/help - –ø–æ–ª—É—á–µ–Ω–∏–µ —ç—Ç–æ–π –ø–æ–º–æ—â–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç–µ –µ–≥–æ."
    )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏."""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    load_dotenv()
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —á–∞—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("search", search)],
        states={
            WAITING: [
                CommandHandler("stop", stop_chat),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
            ],
            CHATTING: [
                CommandHandler("stop", stop_chat),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
            ],
        },
        fallbacks=[CommandHandler("stop", stop_chat)],
    )
    
    application.add_handler(conv_handler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()